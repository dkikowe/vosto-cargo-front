import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "../../axios";
import s from "./Start.module.sass";

export default function Start() {
  const [selected, setSelected] = useState("–ì—Ä—É–∑–æ–¥–∞—Ç–µ–ª—å");
  const [isLoading, setIsLoading] = useState(true);
  const roles = [
    { name: "–ì—Ä—É–∑–æ–¥–∞—Ç–µ–ª—å", emoji: "üì¶" },
    { name: "–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫", emoji: "üöö" },
    { name: "–î–∏—Å–ø–µ—Ç—á–µ—Ä", emoji: "üìû" },
  ];
  const validRoles = roles.map((role) => role.name);
  const navigate = useNavigate();
  const userId = localStorage.getItem("id");
  const initData = window.Telegram.WebApp.initData;

  // –ù–æ–≤—ã–π useEffect –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
  useEffect(() => {
    if (!userId && initData) {
      try {
        const params = new URLSearchParams(initData);
        const userData = params.get("user");

        if (userData) {
          const userObj = JSON.parse(decodeURIComponent(userData));
          console.log("Init user:", userObj);

          if (!userObj.id) {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID");
            return;
          }

          axios
            .post("/getTelegramId", {
              initData: userObj.id,
              img: userObj.photo_url,
              name: userObj.username || userObj.first_name,
            })
            .then((response) => {
              if (response.data?.user?._id) {
                localStorage.setItem("id", response.data.user._id);
              }
              // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
              checkRole(response.data?.user?._id || userId);
            })
            .catch((error) => {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
              alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
              setIsLoading(false);
            });
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ initData:", error);
        setIsLoading(false);
      }
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
      checkRole(userId);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [initData, userId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const checkRole = (id) => {
    if (id) {
      axios
        .get(`/getUserById/${id}`)
        .then((res) => {
          if (res.data && validRoles.includes(res.data.role)) {
            navigate("/menu");
          } else {
            setIsLoading(false);
          }
        })
        .catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
          setIsLoading(false);
        });
    } else {
      setIsLoading(false);
    }
  };

  const handleNext = async () => {
    try {
      await axios.post("/setRole", {
        userId: localStorage.getItem("id"),
        role: selected,
      });
      navigate("/menu");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–∏:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
    }
  };

  if (isLoading) {
    return <div className={s.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className={s.container}>
      <p className={s.who}>–ö—Ç–æ –≤—ã?</p>
      <div className={s.buttons}>
        {roles.map((role) => (
          <button
            key={role.name}
            className={`${s.button} ${selected === role.name ? s.active : ""}`}
            onClick={() => setSelected(role.name)}
          >
            <span className={s.emoji}>{role.emoji}</span> {role.name}
          </button>
        ))}
      </div>
      <button className={s.goButton} onClick={handleNext}>
        –î–∞–ª–µ–µ
      </button>
    </div>
  );
}
