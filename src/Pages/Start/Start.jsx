import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "../../axios";
import s from "./Start.module.sass";

export default function Start() {
  const [selected, setSelected] = useState("–ì—Ä—É–∑–æ–¥–∞—Ç–µ–ª—å");
  const [isLoading, setIsLoading] = useState(true); // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏

  const roles = [
    { name: "–ì—Ä—É–∑–æ–¥–∞—Ç–µ–ª—å", emoji: "üì¶" },
    { name: "–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫", emoji: "üöö" },
    { name: "–î–∏—Å–ø–µ—Ç—á–µ—Ä", emoji: "üìû" },
  ];

  const validRoles = roles.map((role) => role.name);
  // ["–ì—Ä—É–∑–æ–¥–∞—Ç–µ–ª—å", "–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫", "–î–∏—Å–ø–µ—Ç—á–µ—Ä"]

  const navigate = useNavigate();
  const userId = localStorage.getItem("id");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (userId) {
      axios
        .get(`/getUserById/${userId}`)
        .then((res) => {
          if (res.data && validRoles.includes(res.data.role)) {
            // –ï—Å–ª–∏ —Ä–æ–ª—å —É–∂–µ –æ–¥–Ω–∞ –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é
            navigate("/menu");
          } else {
            // –ï—Å–ª–∏ —Ä–æ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
            setIsLoading(false);
          }
        })
        .catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
          // –î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
          setIsLoading(false);
        });
    } else {
      // –ï—Å–ª–∏ userId –Ω–µ—Ç, —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏
      setIsLoading(false);
    }
  }, [userId, navigate, validRoles]);

  const handleNext = async () => {
    try {
      await axios.post("/setRole", { userId, role: selected });
      navigate("/menu");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–∏:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
    }
  };

  if (isLoading) {
    // –ü–æ–∫–∞ –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶¬ª
    return <div className={s.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏ —Ä–æ–ª—å –Ω–µ –≤–∞–ª–∏–¥–Ω–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
  return (
    <div className={s.container}>
      <p className={s.who}>–ö—Ç–æ –≤—ã?</p>
      <div className={s.buttons}>
        {roles.map((role) => (
          <button
            key={role.name}
            className={`${s.button} ${selected === role.name ? s.active : ""}`}
            onClick={() => setSelected(role.name)}
          >
            <span className={s.emoji}>{role.emoji}</span> {role.name}
          </button>
        ))}
      </div>
      <button className={s.goButton} onClick={handleNext}>
        –î–∞–ª–µ–µ
      </button>
    </div>
  );
}
